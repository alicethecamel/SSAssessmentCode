import turtle
import math
import random
import os

#set up screen
wn = turtle.Screen()
wn.bgcolor("lightblue")
wn.bgpic("/Users/alicekingma/PycharmProjects/ArcadeAlice/Images for assessment/0f154d69b288820b8e22d681d6767e9c.gif")
wn.tracer(3)

wn.addshape("/Users/alicekingma/PycharmProjects/ArcadeAlice/Images for assessment/money money money.gif")
wn.addshape("/Users/alicekingma/PycharmProjects/ArcadeAlice/Images for assessment/Untitled-3.gif")

#Set score variable

score = 0
print (score)


#Draw border
mypen = turtle.Turtle()
mypen.penup()
mypen.setposition(-300,-300)
mypen.pendown()
mypen.pensize(3)
for side in range(4):
    mypen.forward(600)
    mypen.left(90)
mypen.hideturtle()

#Create player turtle
player = turtle.Turtle()
player.color("lightblue")
player.shape("/Users/alicekingma/PycharmProjects/ArcadeAlice/Images for assessment/Untitled-3.gif")
player.penup()
player.speed(0)

#Create multiple goals
maxGoals = 15
goals = []


for count in range(maxGoals):
    goals.append(turtle.Turtle())
    goals[count].shape("/Users/alicekingma/PycharmProjects/ArcadeAlice/Images for assessment/money money money.gif")
    goals[count].penup()
    goals[count].speed(0)
    goals[count].setposition(random.randint(-300, 300), random.randint(-300, 300))


#Set speed variable
speed = 1

#Define functions

def turnleft():
    player.left(30)

def turnright():
    player.right(30)

def increasespeed():
    global speed
    speed += 1

def decreasespeed():
    global speed
    speed -= 1

def isCollision(t1, t2):
    d = math.sqrt(math.pow(t1.xcor()-t2.xcor(), 2) + math.pow(t1.ycor()-t2.ycor(), 2))
    if d < 20:
        return True
    else:
        return False

#Set keyboard bindings
wn.listen()
wn.onkey(turnleft, "Left")
wn.onkey(turnright, "Right")
wn.onkey(increasespeed, "Up")
wn.onkey(decreasespeed, "Down")

wn.listen()

while True:
    player.forward(speed)

    #Boundary checking
    if player.xcor() > 300 or player.xcor() < -300:
        player.right(180)
        os.system("afplay /Users/alicekingma/PycharmProjects/ArcadeAlice/Sounds/bounce.mp3&")
    if player.ycor() > 300 or player.ycor() < -300:
        player.right(180)
        os.system("afplay /Users/alicekingma/PycharmProjects/ArcadeAlice/Sounds/bounce.mp3&")

    #Move the goal
    for count in range(maxGoals):
        goals[count].forward(3)

         #Boundary checking
        if goals[count].xcor() > 290 or goals[count].xcor() < -290:
            goals[count].right(180)
            os.system("afplay /Users/alicekingma/PycharmProjects/ArcadeAlice/Sounds/bounce.mp3&")
        if goals[count].ycor() > 290 or goals[count].ycor() < -290:
            goals[count].right(180)
            os.system("afplay /Users/alicekingma/PycharmProjects/ArcadeAlice/Sounds/bounce.mp3&")

        #Collision checking
        if isCollision(player, goals[count]):
            goals[count].setposition(random.randint(-300, 300), random.randint(-300, 300))
            goals[count].right(random.randint(0, 360))
            os.system("afplay /Users/alicekingma/PycharmProjects/ArcadeAlice/Sounds/collision.mp3&")
            score += 1

            # draw the score on screen
            mypen.undo()
            mypen.penup()
            mypen.hideturtle()
            mypen.setposition(-290, 310)
            scorestring = "score: %s " %score
            mypen.write(scorestring, False, align="Left",font=('Arial', 14, "bold"))

delay = input("Press Enter to finish.")
